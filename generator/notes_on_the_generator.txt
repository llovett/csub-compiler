
TYPES OF 3-ADDRESS INSTRUCTIONS:
1. x = y op z 
2. x = op y
3. x = y
4. goto L
5. if x goto L, ifFalse x goto L
6. if x relop y goto L
7. param x
   param y
   call p,n (where n is the number of arguments)
   y = call p,n (where n is the number of arguments)
   return y
8. x=y[i], y[i]=x
9. x=&y, x=*y, *x=y

The codeTable:
-We'll use the 'quadruple' representation. 
-It is an arraylist of string arrays, each array containing four slots.

-Index 1: operator
 Index 2: result
 Index 3: arg1
 Index 4: arg2 (optional)

 Examples:
 x = z + y, operator: +, arg1: z, arg2: y, result: x (the = is implied)
 x = y, operator: =, arg1: y, result: x
 param x, operator: param, arg1: x
 if x goto L, operator: if, arg1: x, result: L

Type space generation and junk
-each variable/value is given a predetermined amount of storage 
 space depending on its type. This is determined by the 
 machine architecture
-for arrays, multiply the type and the size of the array to get 
 its storage block.


*** Notes from JD ***
***********************************************************

 Code generation will incorporate the following

   1.  Assigning memory locations to variables.

   2.  Flattening control structures; that is, translating a tree structure
   into a sequence of statements using conditional and unconditional
   branches.

   3.  Flattening expression trees; that is, translating into a sequence of
   individual operations, with temporary results stored in registers or
   temporary variables.

   4.  Selecting machine opcodes.

   5.  Managing registers.

***********************************************************

   Translation into three-address code can be performed by applying the
   techniques of syntax-directed translation.  We are interested in two
   attributes for nodes of the syntax tree:  place and code.   place is an
   attribute of symbols and expression nodes, indicating the location in
   memory of the symbol or the result of the expression.  During the
   machine-independent code generation phase, it can represent either a
   reference to the symbol table entry of a variable or to a previous entry
   in the code table (for triples) or a symbolic name (quadruples).

***********************************************************

   Code can be generated by a bottom-up traversal of the syntax tree.  When a
   node is visited, the code generator should first generate code for the
   children of the node.  Then it can generate any code needed for the node
   itself.  .  If the node is an expression node, it must also define the
   place attribute of the node.

***********************************************************
